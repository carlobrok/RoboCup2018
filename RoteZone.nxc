#define PowerVor 70
#define PowerRueck 70
#define PowerDrehen 60

#define SENWERT1 100
#define SENWERT2 100
#define SENWERT3 100
#define SENWERT4 100

#define S1sch Sensor1 > sen1
#define S1wei Sensor1 < sen1

#define S2sch RGB2 < sen2
#define S2wei RGB2 > sen2

#define S3sch RGB3 < sen3
#define S3wei RGB3 > sen3

#define S4sch Sensor4 > sen4
#define S4wei Sensor4 < sen4

#define touchl touchsen[0]
#define touchr touchsen[1]
#define touchm touchsen[2]
#define touchh touchsen[3]

#define neigungX wert[0]
#define neigungY wert[1]
#define neigungZ wert[2]
#define neigungRampeH -10


bool endTest = false;
bool endZone = false;
bool endFahren = false;
bool endEckeFinden = false;
bool endEckeGefunden = false;
bool endFertig = false;
int weissTime = 0;
int endLoop = 0;
string TextEndung = "         ";


// EXTRA VARIABLEN

  int powerVor = 70;
  int extra = 2;

// SENSOR 1

  int Sensor1;
  int sch1;
  int wei1 = 55;
  int sen1;

// SENSOR 2

  int sen2 = SENWERT2;

  unsigned int rawRed2;
  unsigned int rawBlue2;
  unsigned int rawGreen2;
  int RGB2;
  int redProz2;
  int blueProz2;
  int greenProz2;


// SENSOR 3

  int sen3 = SENWERT3;

  unsigned int rawRed3;
  unsigned int rawBlue3;
  unsigned int rawGreen3;
  int RGB3;
  int redProz3;
  int blueProz3;
  int greenProz3;


// SENSOR 4

  int sch4;
  int Sensor4;
  int wei4 = 56;
  int sen4;

// I2C-Kommunikation

    byte adresse = 0x18;                                // Arduino Adresse
    byte anzahl_bytes = 10;                             // Anzahl der von Arduinoboard erwarteten Daten/Zahlen
    byte gesendet[];                                    // Array für gesendete Daten
    byte empfangen[];                                   // Array für empfangene Daten
    int wert[] = {0,0,0};                               // Array für empfangene Daten des Neigungs Sensors
    int touchsen[] = {0,0,0,0};

    int Lese_Arduino()
    {
      ArrayBuild(gesendet, adresse, 0x00);                               // Sende den Wert 0 zum Arduinoboard
      I2CBytes(S1, gesendet, anzahl_bytes, empfangen);                        // I2C-Kommunikation
      wert[0] = empfangen[0] - 128;
      wert[1] = empfangen[1] - 128;
      wert[2] = empfangen[2] - 128;
      Sensor1 = empfangen[3];
      Sensor4 = empfangen[4];
      touchsen[0] = empfangen[5];                           // TOUCH LINKS
      touchsen[1] = empfangen[6];                           // TOUCH RECHTS
      touchsen[2] = empfangen[7];                           // TOUCH MITTE
      touchsen[3] = empfangen[8];                           // TOUCH HINTEN
      return(empfangen[0]);
    }

    task msgReset()
    {
      Wait(3000);
      ClearLine(LCD_LINE8);
      TextOut(1,LCD_LINE8,"MSG:                    ");
    }

    void msg(string text) {
      TextOut(1,LCD_LINE8,"MSG: " + text);
      start msgReset;
    }

//-----------Subs----------------
  //-------- VOR -----------


    void vor_nt()
    {
      OnRev(OUT_AC, PowerVor);
    }

    void vor_t(int Zeit_vor)
    {
      OnRev(OUT_AC, PowerVor);
      Wait(Zeit_vor);
    }

  //--------RUECK-----------

    void rueck_nt()
    {
      OnFwd(OUT_AC, PowerRueck);
    }

    void rueck_t(int Zeit_rueck)
    {
      OnFwd(OUT_AC, PowerRueck);
      Wait(Zeit_rueck);
    }

  //--------RECHTS----------
    void rechts_nt()
    {
      OnFwd(OUT_C, PowerDrehen);
      OnRev(OUT_A, PowerDrehen);
    }

    void rechts_t(int Zeit_rechts)
    {
      OnFwd(OUT_C, PowerDrehen);
      OnRev(OUT_A, PowerDrehen);
      Wait(Zeit_rechts);
    }

  //-----LINKS-------------
    void links_nt()
    {/* condition */
      OnFwd(OUT_A, PowerDrehen);
      OnRev(OUT_C, PowerDrehen);
    }
    void links_t(int Zeit_links)
    {
      OnFwd(OUT_A, PowerDrehen);
      OnRev(OUT_C, PowerDrehen);
      Wait(Zeit_links);
    }


//  ENDZONE  ------------------------
    void ausrichtenWand()
    {
      vor_nt();
      bool fertig = false;
      while(!fertig)
      {
        int turns;
        until(touchl == 1 && touchr == 1 || turns > 10) {
          vor_nt();
          if(touchr == 1){
            Off(OUT_AC);
            OnFwd(OUT_C, 50);
            Wait(100);
            turns++;
          } else if(touchl == 1){
            Off(OUT_AC);
            OnFwd(OUT_A, 50);
            Wait(100);
            turns++;
          }
          if(turns > 5) {
            vor_t(200);
            turns -= turns;
          }
        }
        fertig = true;
      }
      Off(OUT_AC);
      Wait(200);
      OnRev(OUT_AC, 50);
      Wait(800);
      Off(OUT_AC);
    }

    void endZoneErkennen()
    {
      if(weissTime > 500) {     // WENN 5 SEKUNDEN WEISS
        endTest = true;
        int a;
        int b;
        Off(OUT_AC);
        for(a=0; a < 40 && S1wei && S2wei && S3wei && S4wei; a++){
          links_t(10);
        }
        if(a == 40) {
          for(b = 0; b <80 && S1wei && S2wei && S3wei && S4wei; b++){
            rechts_t(10);
          }
        }
        if(b == 80) {
          links_t(400);
          weissTime = 0;
          endZone = true;
        }
        endTest = false;
      }
    }

    void endZoneAbfahren() {
      while (touchh != 1 && endZone == true) {
        OnFwdSync(OUT_AC, 55, 0);
      }
      msg("WAND H");
    }

    void endDrehen() {
      if (endFahren) {
        if(endLoop % 2 == 0) {
          Off(OUT_AC);
          RotateMotor(OUT_AC, 80, -360);
          RotateMotor(OUT_A, 80, 930);
          for (int i = 0; i < 20; i++) {
            OnRev(OUT_AC, 90);
            Wait(45);
            if(S1sch || S4sch) {
              endEckeGefunden = true;
              endFahren = false;
              i = 5000;
            }
            if(touchl == 1 || touchr == 1) {
              if(!endEckeGefunden) endEckeFinden = true;
              i = 5000;
              endFahren = false;
            }
          }
          if(!endEckeGefunden && !endEckeFinden) {
            RotateMotorEx(OUT_AC, 80, 400, -100, true, false);
            if(S1sch || S4sch) {
              endEckeGefunden = true;
              endFahren = false;
            } else {
              ausrichtenWand();
            }
          } else if(endEckeGefunden) {
            RotateMotorEx(OUT_AC, 80, 400, -100, true, false);
            ausrichtenWand();
          }
          endLoop++;
        } else {


          Off(OUT_AC);
          RotateMotor(OUT_AC, 80, -360);
          RotateMotor(OUT_C, 80, 930);
          for (int i = 0; i < 20; i++) {
            OnRev(OUT_AC, 90);
            Wait(45);
            if(S1sch || S4sch) {
              endEckeGefunden = true;
              endFahren = false;
              i = 5000;
            }
            if(touchl == 1 || touchr == 1) {
              if(!endEckeGefunden) endEckeFinden = true;
              endFahren = false;
              i = 5000;
            }
          }
          if(!endEckeGefunden && !endEckeFinden) {
            RotateMotorEx(OUT_AC, 80, 400, 100, true, false);
            if(S1sch || S4sch) {
              if(!endEckeFinden) endEckeGefunden = true;
              endFahren = false;
            } else {
              ausrichtenWand();
            }
          } else if(endEckeGefunden) {
            RotateMotorEx(OUT_AC, 80, 400, -100, true, false);
            ausrichtenWand();
          }
          endLoop++;
        }
      }
    }

    // KUGEL KÄFIG

    void kaefigHoch()
    {
      OnFwd(OUT_B,100);
      Wait(1000);
      Off(OUT_B);
    }

    void kaefigRunter()
    {
      OnRev(OUT_B,100);
      Wait(500);
      Off(OUT_B);
    }

    // DISPLAY

      void display(bool startup_anzeige, bool werte_anzeigen) {
        if(startup_anzeige)
        {
          ClearScreen();                                  // Display beim Starten
          TextOut(0,LCD_LINE3,"     Starten     ");
          Wait(20);
          TextOut(0,LCD_LINE4,"      .");
          Wait(20);
          TextOut(0,LCD_LINE4,"      ..");
          Wait(20);
          TextOut(0,LCD_LINE4,"      ...");
          Wait(20);
          TextOut(0,LCD_LINE4,"      ....");
          Wait(20);
          TextOut(0,LCD_LINE4,"      .....");
          Wait(20);
          TextOut(0,LCD_LINE4,"       ....");
          Wait(20);
          TextOut(0,LCD_LINE4,"        ...");
          Wait(20);
          TextOut(0,LCD_LINE4,"         ..");
          Wait(20);
          TextOut(0,LCD_LINE4,"          .");
          Wait(20);
          TextOut(0,LCD_LINE4,"           ");
          Wait(300);
          ClearScreen();
          kaefigHoch();
        }
        if(werte_anzeigen){
          TextOut(1, LCD_LINE1, "LS1: " + NumToStr(Sensor1)+"   ");
          if(S1sch) TextOut(55, LCD_LINE1, "S"); else TextOut(55, LCD_LINE1, "W");
          TextOut(60 ,LCD_LINE1,"TL:" + NumToStr(touchl));
          TextOut(1, LCD_LINE2, "LS2: " + NumToStr(RGB2)+"   ");
          if(S2sch) TextOut(55, LCD_LINE2, "S"); else TextOut(55, LCD_LINE2, "W");
          TextOut(60 ,LCD_LINE2,"TR:" + NumToStr(touchr));
          TextOut(1, LCD_LINE3, "LS3: " + NumToStr(RGB3)+"   ");
          if(S3sch) TextOut(55, LCD_LINE3, "S"); else TextOut(55, LCD_LINE3, "W");
          TextOut(60 ,LCD_LINE3,"TM:" + NumToStr(touchm));
          TextOut(1, LCD_LINE4, "LS4: " + NumToStr(Sensor4)+"   ");
          if(S4sch) TextOut(55, LCD_LINE4, "S"); else TextOut(55, LCD_LINE4, "W");
          TextOut(60 ,LCD_LINE4,"TH:" + NumToStr(touchh));
          TextOut(1, LCD_LINE5, "NS-X: " + NumToStr(neigungX)+"   ");
          TextOut(1, LCD_LINE6, "Tempo: " + NumToStr(powerVor) + "%");
          TextOut(1, LCD_LINE7, "WTime: " + NumToStr(weissTime) + "   ");
        }
      }

      void sensorenInit() {
        // SENSOR 1
          sch1 = SENWERT1 + extra;
          sen1 = sch1;
        // SENSOR 4
          sch4 = SENWERT4 + extra;
          sen4 = sch4;
          msg("SEN INIT");
        // SENSOREN DEFINIEREN
          SetSensorLowspeed(IN_1);                                             // Die I2C-Kommunikation wird für Port 1 initialisiert.
          SetSensorColorFull(S2);
          SetSensorColorFull(S3);
      }

// ===== TASKS =====

task werte()
{
  int daten = 0;
  daten = Lese_Arduino();
  while (true) {
    // RGB RAW WERTE   werden aktualisiert

    rawRed2 = ColorSensorRaw(S2, INPUT_RED);
    rawBlue2 = ColorSensorRaw(S2, INPUT_BLUE);
    rawGreen2 = ColorSensorRaw(S2, INPUT_GREEN);
    RGB2 = rawRed2 + rawBlue2 + rawGreen2;
    redProz2 = (rawRed2 * 100) / RGB2;
    blueProz2 = (rawBlue2 * 100) / RGB2;
    greenProz2 = (rawGreen2 * 100) / RGB2;

    rawRed3 = ColorSensorRaw(S3, INPUT_RED);
    rawBlue3 = ColorSensorRaw(S3, INPUT_BLUE);
    rawGreen3 = ColorSensorRaw(S3, INPUT_GREEN);
    RGB3 = rawRed3 + rawBlue3 + rawGreen3;
    redProz3 = (rawRed3 * 100) / RGB3;
    blueProz3 = (rawBlue3 * 100) / RGB3;
    greenProz3 = (rawGreen3 * 100) / RGB3;

    daten = Lese_Arduino();
    display(false, true);
  }
}

task eZone() {
  while (!endZone) {
    if(!endTest && S1wei && S2wei && S3wei && S4wei) {
      weissTime += 10;
      Wait(50);
    } else if(S1sch || S2sch || S3sch || S4sch) {
      weissTime = 0;
    }
  }
}

// MAIN TASK

task main() {
  display(true, false);
  sensorenInit();
  start werte;
  start eZone;

  endFahren = true;
  while(true) {
    vor_nt();
    endZoneErkennen();

    if(endZone) {
      ausrichtenWand();
      Off(OUT_AC);
      RotateMotor(OUT_AC, powerVor, 200);
      RotateMotor(OUT_A, PowerDrehen, 450);
      RotateMotor(OUT_C, PowerDrehen, 450);
      //RotateMotor(OUT_A, PowerDrehen, 200);
      //RotateMotor(OUT_C, PowerDrehen, 200);
      RotateMotor(OUT_AC, powerVor, -200);
      RotateMotorEx(OUT_AC, powerVor, -800, -30, true, false);
      ausrichtenWand();
      kaefigRunter();
      endZoneAbfahren();
      Off(OUT_AC);
      RotateMotor(OUT_C, PowerDrehen, -450);
      RotateMotor(OUT_A, PowerDrehen, -450);

      RotateMotor(OUT_AC, 80, -180);
      RotateMotor(OUT_A, 80, 930);
      OnRev(OUT_AC, 90);
      Wait(900);
      RotateMotorEx(OUT_AC, 80, 400, -100, true, false);
      ausrichtenWand();
      endLoop++;

      endFahren = true;
        while(endFahren) {
          endZoneAbfahren();
          endDrehen();
        }
        while(endEckeFinden) {
          if(endLoop % 2 == 0) {
            RotateMotor(OUT_AC, 80, 370);
            RotateMotor(OUT_C, 80, 900);
          }
          while(S1wei && S4wei) {
            vor_nt();
          }
          endEckeFinden = false;
          endEckeGefunden = true;
        }

        if (endEckeGefunden) {
          endZoneAbfahren();
          while(S1wei && S4wei && touchl == 0) {
            vor_nt();
          }
          if (touchl == 1) {
            RotateMotor(OUT_AC, 80, 360);
            RotateMotorEx(OUT_AC, 80, 400, 100, true, false);
          }
          bool ausgerichtet = false;
          int trysl = 0;
          int trysr = 0;
          while (!ausgerichtet) {

            for (int i = 0; i < 2000 && S1sch && S4wei; i++) {
              Off(OUT_A);
              OnRev(OUT_C, 80);
              if(i > 1800) {
                RotateMotor(OUT_AC, 80, 360);
                if(trysl % 2 == 0) {
                  links_t(100);
                  trysl++;
                } else {
                  rechts_t(200);
                  trysl++;
                }
              }
              Wait(1);
            }
            for (int i = 0; i < 2000 && S4sch && S1wei; i++) {
              Off(OUT_C);
              OnRev(OUT_A, 80);
              if(i > 1800) {
                RotateMotor(OUT_AC, 80, 360);
                if(trysr % 2 == 0) {
                  rechts_t(100);
                  trysl++;
                } else {
                  links_t(200);
                  trysl++;
                }
              }
              Wait(1);
            }
            if(S1sch && S4sch) {
              ausgerichtet = true;
            }
          }
          ausgerichtet = false;

          Off(OUT_AC);
          while(!ausgerichtet) {
            for (int i = 0; i < 500 && S1sch; i++) {
              OnFwd(OUT_A, 80);
              Wait(1);
            }
            if(S1wei) {
              Off(OUT_A);
            }
            for (int i = 0; i < 500 && S4sch; i++) {
              OnFwd(OUT_C, 80);
              Wait(1);
            }
            if(S4wei) {
              Off(OUT_C);
            }
            if (S1wei && S4wei) {
              ausgerichtet = true;
            }
          }
          RotateMotor(OUT_AC, 80, 800);
          RotateMotorEx(OUT_AC, 80, 1000, 100, true, true);
          RotateMotor(OUT_AC, 70, 1000);
          RotateMotor(OUT_AC, 60, -100);
          OnFwd(OUT_B, 100);
          Wait(3000);
          if(endLoop % 2 == 1) {
            rechts_t(200);
          } else {
            links_t(200);
          }
          Off(OUT_AC);
          Wait(500);
          RotateMotor(OUT_AC, 100, -800);
          Stop(true);
        }
      }
      /*while (endZone) {
        ausrichtenWand();
        Off(OUT_AC);
        RotateMotor(OUT_AC, powerVor, 200);
        RotateMotor(OUT_A, PowerDrehen, 400);
        RotateMotor(OUT_C, PowerDrehen, 400);
        //RotateMotor(OUT_A, PowerDrehen, 200);
        //RotateMotor(OUT_C, PowerDrehen, 200);
        RotateMotor(OUT_AC, powerVor, 200);
        RotateMotorEx(OUT_AC, powerVor, -800, -30, true, false);
        ausrichtenWand();
        kaefigRunter();
        endZoneAbfahren();
        Off(OUT_AC);
        RotateMotor(OUT_C, PowerDrehen, -200);
        RotateMotor(OUT_A, PowerDrehen, -200);
        RotateMotor(OUT_C, PowerDrehen, -200);
        RotateMotor(OUT_A, PowerDrehen, -200);
        endDrehen();
        endLoop++;
        endFahren = true;

        while (endFahren) {
          endZoneAbfahren();
          endDrehen();
          endLoop++;
        }
        if(!endEckeGefunden && endEckeFinden) {

        } else if(endEckeGefunden) {
          bool fertig = false;
          endZoneAbfahren();
          while (S1wei && S4wei) {
            vor_nt();
          }
          while(!fertig) {
            if(S1sch && S4wei) {
              for (int i = 0; i < 800 && S4wei; i++) {
                links_t(1);
              }
            }
            if(S4sch && S1wei) {
              for (int i = 0; i < 800 && S1wei; i++) {
                rechts_t(1);
              }
            }
            if(S1sch && S4sch) {
              endFertig = true;
              fertig = true;
            }
          }
        }
      }
      while(endFertig){
        RotateMotor(OUT_AC, 60, 600);
        RotateMotorEx(OUT_AC, 80, 500, 100, true, true);
        RotateMotor(OUT_AC, 60, 700);
        kaefigHoch();
        RotateMotor(OUT_AC, 60, -400);
      }*/
    }
  }
